///<reference path="World.ts"/>
///<reference path="Interpreter.ts"/>
///<reference path="Graph.ts"/>
///<reference path="Arrays.ts"/>

import Dictionary = collections.Dictionary;
import Interpreter = Interpreter.DNFFormula;

/**
* Planner module
*
* The goal of the Planner module is to take the interpetation(s)
* produced by the Interpreter module and to plan a sequence of actions
* for the robot to put the world into a state compatible with the
* user's command, i.e. to achieve what the user wanted.
*
* The planner should use your A* search implementation to find a plan.
*/
module Planner {

    //////////////////////////////////////////////////////////////////////
    // exported functions, classes and interfaces/types

    /**
     * Top-level driver for the Planner. Calls `planInterpretation` for each given interpretation generated by the Interpreter.
     * @param interpretations List of possible interpretations.
     * @param currentState The current state of the world.
     * @returns Augments Interpreter.InterpretationResult with a plan represented by a list of strings.
     */
    export function plan(interpretations : Interpreter.InterpretationResult[], currentState : WorldState) : PlannerResult[] {
        var errors : Error[] = [];
        var plans : PlannerResult[] = [];
        interpretations.forEach((interpretation) => {
            try {
                var result : PlannerResult = <PlannerResult>interpretation;
                result.plan = planInterpretation(result.interpretation, currentState);
                if (result.plan.length == 0) {
                    result.plan.push("That is already true!");
                }
                plans.push(result);
            } catch(err) {
                errors.push(err);
            }
        });
        if (plans.length) {
            return plans;
        } else {
            // only throw the first error found
            throw errors[0];
        }
    }

    export interface PlannerResult extends Interpreter.InterpretationResult {
        plan : string[];
    }

    export function stringify(result : PlannerResult) : string {
        return result.plan.join(", ");
    }

    //////////////////////////////////////////////////////////////////////
    // private functions

    function literalHolds(literal: Literal, state: WorldState): boolean {
      switch (literal.relation) {
        case 'holding':
          return state.holding == literal.args[0];
        case 'ontop':
          if (literal.args[1] == 'floor') {
            state.stacks.forEach(stack => {
              if (stack.indexOf(literal.args[0]) == 0)
                return true;
            });
            return false;
          }

          state.stacks.forEach(stack => {
            if (stack.indexOf(literal.args[0])
                == stack.indexOf(literal.args[1]) - 1)
              return true;
          });
          return false;
        case 'inside':
          // Same as 'ontop' since it is already checked by the interpreter
          state.stacks.forEach(stack => {
            if (stack.indexOf(literal.args[0])
                == stack.indexOf(literal.args[1]) - 1)
              return true;
          });
          return false;
        case 'above':
          if (literal.args[1] == 'floor')
            return true;
          state.stacks.forEach(stack => {
            if (stack.indexOf(literal.args[0]) > stack.indexOf(literal.args[1]))
              return true;
          });
          return false;
        case 'under':
          state.stacks.forEach(stack => {
            if (stack.indexOf(literal.args[0]) < stack.indexOf(literal.args[1]))
              return true;
          });
          return false;
        case 'beside':
          for (let x = 0; x < state.stacks.length; x++)
            if (state.stacks[x].include(literal.args[0])
              return (x >= 1 && state.stacks[x - 1].includes(literal.args[1]))
                  || (x < state.stacks.length - 1
                      && state.stacks[x + 1].includes(literal.args[1]))
          return false;
        case 'leftof':
          for (let x = 0; x < state.stacks.length; x++)
            if (state.stacks[x].include(literal.args[0])
              for (let x2 = x + 1; x2 < state.stacks.length; x2++)
                if (state.stacks[x2].includes(literal.args[1]))
                  return true;
          return false;
        case 'rightof':
          for (let x = 0; x < state.stacks.length; x++)
            if (state.stacks[x].include(literal.args[0])
              for (let x2 = x - 1; x2 >= 0; x2--)
                if (state.stacks[x2].includes(literal.args[1]))
                  return true;
          return false;
      }
    }

    class StateNode {
      move: string;
      state: WorldState;

      isGoal(interpretation: DNFFormula): boolean {
        return anyValue(interpretation, (conjunction) =>
            allValues(conjunction, (literal) =>
                literalHolds(literal, this.state)));
      }

      heuristics(): number {
        return 0;
      }
    }

    class StateGraph implements Graph<StateNode> {
      /*
      constructor (state: WorldState) {
        for (let move of possibleMoves(state)) {
          //this.addEdge(new StateNode('', state), new StateNode(move, newWorldState(state, move)))
        }
      }

      neighbours: Dictionary<StateNode, StateNode[]> = new Dictionary<StateNode, StateNode[]>();

      addEdge(first: StateNode, second: StateNode): void {
        let nodes = this.neighbours.getValue(first);

        if (nodes == undefined) {
          this.neighbours.setValue(first, [second]);
        } else {
          nodes.push(second);
          this.neighbours.setValue(first, nodes);
        }

        addEdge(second, first);
      }
      */

      // TODO Return all possible moves (on the fly)
      // Niklas
      outgoingEdges(node: StateNode): Edge<StateNode>[] {
        // let edges: Edge<StateNode>[] = [];
        // this.neighbours.getValue(node).forEach(neighbour => {
        //   edges.push(new Edge<StateNode>(node, neighbour, 1));
        // });
        //
        // return edges;
      }

      // containsState(state: WorldState): boolean {
      //
      // }
    }

    /**
     * The core planner function. The code here is just a template;
     * you should rewrite this function entirely. In this template,
     * the code produces a dummy plan which is not connected to the
     * argument `interpretation`, but your version of the function
     * should be such that the resulting plan depends on
     * `interpretation`.
     *
     *
     * @param interpretation The logical interpretation of the user's desired goal. The plan needs to be such that by executing it, the world is put into a state that satisfies this goal.
     * @param state The current world state.
     * @returns Basically, a plan is a
     * stack of strings, which are either system utterances that
     * explain what the robot is doing (e.g. "Moving left") or actual
     * actions for the robot to perform, encoded as "l", "r", "p", or
     * "d". The code shows how to build a plan. Each step of the plan can
     * be added using the `push` method.
     */
    // TODO Call A* and get the moves from the path (Node.move), plan.push()
    // graph : Graph<Node>               ====> new StateGraph()
    // start : Node                      ====> start = new StateNode('', state)
    // goal : (n : Node) => boolean      ====> (n) => n.isGoal()
    // heuristics : (n : Node) => number ====> (n) => n.heuristics()
    // timeout : number                  ====> 5
    //
    // Phil√©mon
    function planInterpretation(interpretation : DNFFormula, state : WorldState) : string[] {
        // This function returns a dummy plan involving a random stack
        do {
            var pickstack = Math.floor(Math.random() * state.stacks.length);
        } while (state.stacks[pickstack].length == 0);
        var plan : string[] = [];

        // First move the arm to the leftmost nonempty stack
        if (pickstack < state.arm) {
            plan.push("Moving left");
            for (var i = state.arm; i > pickstack; i--) {
                plan.push("l");
            }
        } else if (pickstack > state.arm) {
            plan.push("Moving right");
            for (var i = state.arm; i < pickstack; i++) {
                plan.push("r");
            }
        }

        // Then pick up the object
        var obj = state.stacks[pickstack][state.stacks[pickstack].length-1];
        plan.push("Picking up the " + state.objects[obj].form,
                  "p");

        if (pickstack < state.stacks.length-1) {
            // Then move to the rightmost stack
            plan.push("Moving as far right as possible");
            for (var i = pickstack; i < state.stacks.length-1; i++) {
                plan.push("r");
            }

            // Then move back
            plan.push("Moving back");
            for (var i = state.stacks.length-1; i > pickstack; i--) {
                plan.push("l");
            }
        }

        // Finally put it down again
        plan.push("Dropping the " + state.objects[obj].form,
                  "d");

        return plan;
    }

    function getPossibleMoves(state: WorldState): string[] {
      let possibleMoves: string[] = [];

      if (state.holding.length == 0) {
        possibleMoves.push('p');
      } else if (canDrop(state)) {
        possibleMoves.push('d');
      }

      if (state.arm > 0)
        possibleMoves.push('l');

      if (state.arm < state.stacks.length)
        possibleMoves.push('r');

      return possibleMoves;
    }

    // Dominik
    function canDrop(state: WorldState): boolean {

    }

    // Dominik
    function newWorldState(state: WorldState, move: string): WorldState {

    }
}
